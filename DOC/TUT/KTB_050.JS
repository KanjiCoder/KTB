//+==========================================================+// // [---][001]
//| Code Section Is Below This Point                         |// // [---][001]
//+==========================================================+// // [---][001]
//|#_KANJIS_TILEMAP_BASE_#:==================================|// // [---][001]
//|                                                          |// // [---][001]
//|  @KTB@ : Kanji_Tilemap_Base / Kanjis_Tilemap_Base        |// // [---][001]
//|                                                          |// // [---][001]
//|  A project to allow you to quickly experiment with       |// // [---][001]
//|  tilemap shader ideas without having to do all of        |// // [---][001]
//|  the setup code needed to create the webgl contexts      |// // [---][001]
//|  and basic editing code for setting down tiles.          |// // [---][001]
//|                                                          |// // [048][---]
//|  Code is written very tersely, but explanations can      |// // [048][---]
//|  be found at start of comments section :                 |// // [048][---]
//|                                                          |// // [048][---]
//|  SEE[ $_NAME_LIST_$ ]                                    |// // [048][---]
//|                                                          |// // [---][001]
//+==================================:#_KANJIS_TILEMAP_BASE_#+// // [---][001]
//:#_CODING_CONVENTIONS_#:===================================:// // [046]
//:                                                          :// // [046]
//:  "c_" : Constants , simple text or number replacement.   :// // [046]
//:  "d_" : Data      , complex immutable or mutable data.   :// // [046]
//:  "F_" : Functions , ALL_CAPITAL                      .   :// // [046]
//:  "kt_": Data : KTB Lib Prefix "KT" to avoid collision.   :// // [046]
//:  "KT_": FUNC : KTB Lib Prefix "KT" to avoid collision.   :// // [046]
//:                                                          :// // [046]
//:===================================:#_CODING_CONVENTIONS_#:// // [046]
//:#_D_DATA_CONFIGURATION_#:=================================:// // [---][029][---]
                                                                 // [---][029][---]
    let d_up1 =( (1) ); //: @d_up1@ : Use_Program_001 ://        // [---][029][---]
    let d_up2 =( 0x0 ); //: @d_up2@ : Use_Program_002 ://        // [---][029][---]
    let d_up3 =( 0x0 ); //: @d_up3@ : Use_Program_003 ://        // [---][029][---]
    let d_up4 =( 0x0 ); //: @d_up4@ : Use_Program_004 ://        // [---][029][---]
                                                                 // [---][029][---]
//:=================================:#_D_DATA_CONFIGURATION_#:// // [---][029][---]
//:#_C_CONSTANT_#:===========================================:// // [---][004][---]
                                                                 // [---][---][---]
    const _constants_=(0)///////////////////////////////////     // [---][012]
    ////                                                         // [---][012]
    ,   c_wvc =(           "webgl2" )//: WGL_VER.CONTEXT ://     // [---][012]
    ,   c_wvs =( "# version 300 es" )//: WGL_VER.SHADER  ://     // [---][012]
    ,   c_wpf =( "precision highp float" )//:WGL_PRE_FLT ://     // [---][032][---]
    ,   c_sprolog =( c_wvs +"\n"+ c_wpf + ";" + "\n" )//////     // [037][032][---]
    ////                                                         // [037][012]
    ,   c_tui_p2k =( "[_YOU_MEAN_:c_p2k_tui]" )/////////////     // [037][---]
    ,   c_p2k_tui =( 1 ) //: $_P2K_TEXTURE_UNIT_INDEX_$  ://     // [037][---]
    ////                                                         // [---]
    ,   c_p2k_v1u =( "d_p2k_v1u" )//: Vert_1_Uniform name://     // [041]
    ,   c_p2k_f1u =( "d_p2k_f1u" )//: Frag_1_Uniform name://     // [041]
    ,   c_p2k_v2u =( "d_p2k_v2u" )//: Vert_2_Uniform name://     // [041]
    ,   c_p2k_f2u =( "d_p2k_f2u" )//: Frag_2_Uniform name://     // [041]
    ,   c_p2k_v3u =( "d_p2k_v3u" )//: Vert_3_Uniform name://     // [041]
    ,   c_p2k_f3u =( "d_p2k_f3u" )//: Frag_3_Uniform name://     // [041]
    ,   c_p2k_v4u =( "d_p2k_v4u" )//: Vert_4_Uniform name://     // [041]
    ,   c_p2k_f4u =( "d_p2k_f4u" )//: Frag_4_Uniform name://     // [041]
    ////                                                         // [---]
    ,kt_c_sbx =( 640 )//: @sbx@ : $_Sprite__Block_$.X :::://     // [046]
    ,kt_c_sby =( 896 )//: @sby@ : $_Sprite__Block_$.Y :::://     // [046]
    ////                                                         // [046]
    ,kt_c_ubx =( 704 )//: @ubx@ : $_Uniform_Block_$.X :::://     // [046]
    ,kt_c_uby =( 896 )//: @uby@ : $_Uniform_Block_$.Y :::://     // [046]
    ////                                                         // [---]
    ,kt_c_uri_tik =( 0 )//: UniformRelativeIndex - TICKER://     // [048]
    ,kt_c_uri_dir =( 1 )//: UniformRelativeIndex - DIRTY?://     // [048]
    ////                                                         // [048]
    ,kt_c_uri_v1l =( 2 )//: U_R_I . vp1_x_0 / vp1_lef    ://     // [048]
    ,kt_c_uri_v1r =( 3 )//: U_R_I . vp1_x_1 / vp1_rig    ://     // [048]
    ,kt_c_uri_v1t =( 4 )//: U_R_I . vp1_y_0 / vp1_top    ://     // [048]
    ,kt_c_uri_v1b =( 5 )//: U_R_I . vp1_y_1 / vp1_bot    ://     // [048]
    ////                                                         // [048]
    ,kt_c_uri_v0l =( 6 )//: U_R_I . vp0_x_0 / vp0_lef    ://     // [048]
    ,kt_c_uri_v0r =( 7 )//: U_R_I . vp0_x_1 / vp0_rig    ://     // [048]
    ,kt_c_uri_v0t =( 8 )//: U_R_I . vp0_y_0 / vp0_top    ://     // [048]
    ,kt_c_uri_v0b =( 9 )//: U_R_I . vp0_y_1 / vp0_bot    ://     // [048]
    ////                                                         // [048]
    ,kt_c_uri_vcl =(10 )//: U_R_I . vpc_x_0 / vpc_lef    ://     // [048]
    ,kt_c_uri_vcr =(11 )//: U_R_I . vpc_x_1 / vpc_rig    ://     // [048]
    ,kt_c_uri_vct =(12 )//: U_R_I . vpc_y_0 / vpc_top    ://     // [048]
    ,kt_c_uri_vcb =(12 )//: U_R_I . vpc_y_1 / vpc_bot    ://     // [048]
    ////                                                         // [---]
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;     // [---][012]
                                                                 // [---][---]
//:===========================================:#_C_CONSTANT_#:// // [004][---]
//:#_D_DATA_#:===============================================:// // [004][002]
                                                                 // [---][002]
    var d_p2k_cpu ; //: $_CPU_SIDE_2048_X_2048_TEXTURE_$ ://     // [037][---]
    var d_p2k_tex ; //: $_WEBGL_TEXTURE_OBJECT_HANDLE_$  ://     // [037][---]
                                                                 // [---][002]
    /// d_p2k_l01 ; //: Uniform LOCATION #1 ( sampler )::://     // [---][002]
    /// d_p2k_u01 ; //:      GPU UNIFORM #1 ( sampler )::://     // [---][040][002]
    var d_p2k_v1l ; //: @v1l@ : Vert_001_Location        ://     // [041]
    var d_p2k_f1l ; //: @f1l@ : Frag_001_Location        ://     // [041]
                    //:                                ::://     // [---][002]
    /// d_p2k_l02 ; //: Uniform LOCATION #2 ( sampler )::://     // [---][002]
    /// d_p2k_u02 ; //:      GPU UNIFORM #2 ( sampler )::://     // [---][040][002]
    var d_p2k_v2l ; //: @v1l@ : Vert_001_Location        ://     // [041]
    var d_p2k_f2l ; //: @f1l@ : Frag_001_Location        ://     // [041]
                    //:                                ::://     // [---][002]
    /// d_p2k_l03 ; //: Uniform LOCATION #3 ( sampler )::://     // [---][002]
    /// d_p2k_u03 ; //:      GPU UNIFORM #3 ( sampler )::://     // [---][040][002]
    var d_p2k_v3l ; //: @v1l@ : Vert_001_Location        ://     // [041]
    var d_p2k_f3l ; //: @f1l@ : Frag_001_Location        ://     // [041]
                    //:                                ::://     // [---][002]
    /// d_p2k_l04 ; //: Uniform LOCATION #4 ( sampler )::://     // [---][002]
    /// d_p2k_u04 ; //:      GPU UNIFORM #4 ( sampler )::://     // [---][040][002]
    var d_p2k_v4l ; //: @v1l@ : Vert_001_Location        ://     // [041]
    var d_p2k_f4l ; //: @f1l@ : Frag_001_Location        ://     // [041]
                                                                 // [---][---]
    var d_hp1 ;;;;; //: Handle_Program #1 :::::::::::::::://     // [018][003]
    var d_hp2 ;;;;; //: Handle_Program #2 :::::::::::::::://     // [018][003]
    var d_hp3 ;;;;; //: Handle_Program #3 :::::::::::::::://     // [018][003]
    var d_hp4 ;;;;; //: Handle_Program #4 :::::::::::::::://     // [018][003]
                                                                 // [---][003]
    var d_hv1 ;;;;; //: Handle_Vertex  #1 (shader_object)://     // [---][003]
    var d_hv2 ;;;;; //: Handle_Vertex  #2 (shader_object)://     // [---][003]
    var d_hv3 ;;;;; //: Handle_Vertex  #3 (shader_object)://     // [---][003]
    var d_hv4 ;;;;; //: Handle_Vertex  #4 (shader_object)://     // [---][003]
                                                                 // [---][003]
    var d_hf1 ;;;;; //: Handle_Fragme  #1 (shader_object)://     // [---][003]
    var d_hf2 ;;;;; //: Handle_Fragme  #2 (shader_object)://     // [---][003]
    var d_hf3 ;;;;; //: Handle_Fragme  #3 (shader_object)://     // [---][003]
    var d_hf4 ;;;;; //: Handle_Fragme  #4 (shader_object)://     // [---][003]
                                                                 // [---][003]
    var d_sv1 ;;;;; //: Source_Vertex  #1 (source_string)://     // [---][003]
    var d_sv2 ;;;;; //: Source_Vertex  #2 (source_string)://     // [---][003]
    var d_sv3 ;;;;; //: Source_Vertex  #3 (source_string)://     // [---][003]
    var d_sv4 ;;;;; //: Source_Vertex  #4 (source_string)://     // [---][003]
                                                                 // [---][003]
    var d_sf1 ;;;;; //: Source_Fragme  #1 (source_string)://     // [---][003]
    var d_sf2 ;;;;; //: Source_Fragme  #2 (source_string)://     // [---][003]
    var d_sf3 ;;;;; //: Source_Fragme  #3 (source_string)://     // [---][003]
    var d_sf4 ;;;;; //: Source_Fragme  #4 (source_string)://     // [---][003]
                                                                 // [---][---]
    var d_htm_win ; //: HTML_related_thingy.WINDOW       ://     // [---][008]
    var d_htm_doc ; //: HTML_related_thingy.DOCUMENT     ://     // [---][008]
    var d_htm_bod ; //: HTML_related_thingy.BODY         ://     // [---][008]
    var d_htm_can ; //: HTML_related_thingy.CANVAS       ://     // [011]
                                                                 // [011]
    var d_wgl ;;;;; //: Web_GL (context object)          ://     // [011]
                                                                 // [---][---]
//:===============================================:#_D_DATA_#:// // [---][004][002]
//:#_D_DATA_SHADER_001_#:====================================:// // [013]
d_sv1=(((c_sprolog)))+(` //::::::[ TILEMAP_VERT_SHADER.GAME ]:// // [032][013]
                                                                 // [---]
    int fan_x[6]=(int[6](0x0 ,  (-1)  ,-1,+1,+1,  (-1)  ));      // [036][030][---]
    int fan_y[6]=(int[6](0x0 ,  (-1)  ,+1,+1,-1,  (-1)  ));      // [036][030][---]
    #define V_I_D ( gl_VertexID )                                // [---][030][---]
                                                                 // [---]
    precision highp usampler2D ; //:_____________________://     // [---][044]
    uniform         usampler2D d_p2k_v1u ; //:$_SAM_P2K_$://     // [---][044]
    void SAMNOOP(   usampler2D sam ){ } //:   $_NOCOLIN_$://     // [045]
                                                                 // [---][030][---]
    void main(){    ///////////////////[ VOID_MAIN_VERT.001 ]:// // [---][030][024]
                                                                 // [---]
        if( 0==0 ){ SAMNOOP( d_p2k_v1u ); };;;;;;;;;;;;;;;;;     // [045]
                                                                 // [---]
        gl_Position=( vec4(                                      // [---][030][---]
            float( fan_x[ V_I_D ] )                              // [---][030][---]
        ,   float( fan_y[ V_I_D ] )                              // [---][030][---]
        ,   float(         0x0    )                              // [---][030][---]
        ,   float(         (1)    )                              // [---][030][---]
        ));;                                                     // [---][030][---]
                                                                 // [---][030][---]
    }   ///////////////////////////////[ VOID_MAIN_VERT.001 ]:// // [---][030][024]
                                                                 // [---]
`);;//:::::::::::::::::::::::::::[ TILEMAP_VERT_SHADER.GAME ]:// // [013]
d_sf1=(((c_sprolog)))+(` //::::::[ TILEMAP_FRAG_SHADER.GAME ]:// // [032][013]
                                                                 // [---]                                                   
    out vec4 f_c ;                                               // [031][---]
                                                                 // [---]
    precision highp usampler2D ; //:_____________________://     // [---][044]
    uniform         usampler2D d_p2k_f1u ; //:$_SAM_P2K_$://     // [---][044]
    void SAMNOOP(   usampler2D sam ){ } //:   $_NOCOLIN_$://     // [045]
                                                                 // [---]
    void main(){    ///////////////////[ VOID_MAIN_FRAG.001 ]:// // [031][024]
                                                                 // [---]
        if( 0==0 ){ SAMNOOP( d_p2k_f1u ); };;;;;;;;;;;;;;;;;     // [045]
                                                                 // [---]
        f_c =( vec4( 1,0,1, (1.0) ) );                           // [031][---]
                                                                 // [031][---]
    }   ///////////////////////////////[ VOID_MAIN_FRAG.001 ]:// // [031][024]
                                                                 // [---]
`);;//:::::::::::::::::::::::::::[ TILEMAP_FRAG_SHADER.GAME ]:// // [013]
//:====================================:#_D_DATA_SHADER_001_#:// // [013]
//:#_D_DATA_SHADER_002_#:====================================:// // [013]
d_sv2=(((c_sprolog)))+(` //::::::[ POINT_SPRITE_VERT_SHADER ]:// // [032][013]
                                                                 // [---]
    precision highp usampler2D ; //:_____________________://     // [044]
    uniform         usampler2D d_p2k_v2u ; //:$_SAM_P2K_$://     // [044]
    void SAMNOOP(   usampler2D sam ){ } //:   $_NOCOLIN_$://     // [045]
                                                                 // [---]
    void main(){    ///////////////[ VOID_MAIN_VERT.002 ]://     // [045][024]
                                                                 // [---]
        if( 0==0 ){ SAMNOOP( d_p2k_v2u ); };;;;;;;;;;;;;;;;;     // [045]
                                                                 // [---]
    }   ///////////////////////////[ VOID_MAIN_VERT.002 ]://     // [024]
                                                                 // [---]
`);;//::::::::::::::::::::::[ POINT_SPRITE_VERT_SHADER.GAME ]:// // [013]
d_sf2=(((c_sprolog)))+(` //:[ POINT_SPRITE_FRAG_SHADER.GAME ]:// // [032][013]
                                                                 // [---]
    precision highp usampler2D ; //:_____________________://     // [044]
    uniform         usampler2D d_p2k_f2u ; //:$_SAM_P2K_$://     // [044]
    void SAMNOOP(   usampler2D sam ){ } //:   $_NOCOLIN_$://     // [045]
                                                                 // [---]
    void main(){    ////////////////[ VOID_MAIN_FRAG.002 ]//     // [045][024]
                                                                 // [---]
        if( 0==0 ){ SAMNOOP( d_p2k_f2u ); };;;;;;;;;;;;;;;;;     // [045]
                                                                 // [---]
    }   ////////////////////////////[ VOID_MAIN_FRAG.002 ]//     // [045][024]
                                                                 // [---]
`);;//::::::::::::::::::::::[ POINT_SPRITE_FRAG_SHADER.GAME ]:// // [013]
//:====================================:#_D_DATA_SHADER_002_#:// // [013]
//:#_D_DATA_SHADER_003_#:====================================:// // [013]
d_sv3=(((c_sprolog)))+(` //::::::[ TILEMAP_VERT_SHADER.MENU ]:// // [032][013]
                                                                 // [---]
    precision highp usampler2D ; //:_____________________://     // [044]
    uniform         usampler2D d_p2k_v3u ; //:$_SAM_P2K_$://     // [044]
    void SAMNOOP(   usampler2D sam ){ } //:   $_NOCOLIN_$://     // [045]
                                                                 // [---]
    void main(){    ////////////////[ VOID_MAIN_VERT.003 ]//     // [045][024]
                                                                 // [---]
        if( 0==0 ){ SAMNOOP( d_p2k_v3u ); };;;;;;;;;;;;;;;;;     // [045]
                                                                 // [---]
    }   ////////////////////////////[ VOID_MAIN_VERT.003 ]//     // [045][024]
                                                                 // [---]
`);;//:::::::::::::::::::::::::::[ TILEMAP_VERT_SHADER.MENU ]:// // [013]
d_sf3=(((c_sprolog)))+(` //::::::[ TILEMAP_FRAG_SHADER.MENU ]:// // [032][013]
                                                                 // [---]
    precision highp usampler2D ; //:_____________________://     // [044]
    uniform         usampler2D d_p2k_f3u ; //:$_SAM_P2K_$://     // [044]
    void SAMNOOP(   usampler2D sam ){ } //:   $_NOCOLIN_$://     // [045]
                                                                 // [---]
    void main(){    ////////////////[ VOID_MAIN_FRAG.003 ]//     // [045][024]
                                                                 // [---]
        if( 0==0 ){ SAMNOOP( d_p2k_f3u ); };;;;;;;;;;;;;;;;;     // [045]
                                                                 // [---]
    }   ////////////////////////////[ VOID_MAIN_FRAG.003 ]//     // [045][024]
                                                                 // [---]
`);;//:::::::::::::::::::::::::::[ TILEMAP_FRAG_SHADER.MENU ]:// // [013]
//:====================================:#_D_DATA_SHADER_003_#:// // [013]
//:#_D_DATA_SHADER_004_#:====================================:// // [013]
d_sv4=(((c_sprolog)))+(` //:[ POINT_SPRITE_VERT_SHADER.MENU ]:// // [032][013]
                                                                 // [---]
    precision highp usampler2D ; //:_____________________://     // [044]
    uniform         usampler2D d_p2k_v4u ; //:$_SAM_P2K_$://     // [044]
    void SAMNOOP(   usampler2D sam ){ } //:   $_NOCOLIN_$://     // [045]
                                                                 // [---]
    void main(){    ////////////////[ VOID_MAIN_VERT.004 ]//     // [045][024]
                                                                 // [---]
        if( 0==0 ){ SAMNOOP( d_p2k_v4u ); };;;;;;;;;;;;;;;;;     // [045]
                                                                 // [---]
    }   ////////////////////////////[ VOID_MAIN_VERT.004 ]//     // [045][024]
                                                                 // [---]
`);;//::::::::::::::::::::::[ POINT_SPRITE_VERT_SHADER.MENU ]:// // [013]
d_sf4=(((c_sprolog)))+(` //:[ POINT_SPRITE_FRAG_SHADER.MENU ]:// // [032][013]
                                                                 // [---]
    precision highp usampler2D ; //:_____________________://     // [044]
    uniform         usampler2D d_p2k_f4u ; //:$_SAM_P2K_$://     // [044]
    void SAMNOOP(   usampler2D sam ){ } //:   $_NOCOLIN_$://     // [045]
                                                                 // [---]
    void main(){    ////////////////[ VOID_MAIN_FRAG.004 ]//     // [045][024]
                                                                 // [---]
        if( 0==0 ){ SAMNOOP( d_p2k_f4u ); };;;;;;;;;;;;;;;;;     // [045]
                                                                 // [---]
    }   ////////////////////////////[ VOID_MAIN_FRAG.004 ]//     // [045][024]
                                                                 // [---]
`);;//::::::::::::::::::::::[ POINT_SPRITE_FRAG_SHADER.MENU ]:// // [013]
//:====================================:#_D_DATA_SHADER_004_#:// // [013]
//:#_F_FUNCTION_#:===========================================:// // [004][---]
                                                                 // [---]
    const   F_ERROR =( i_msg )=>{   //::::::::::::::::::::::::// // [---][009]
                                                                 // [---][009]
        console.log(  "[ F_ERROR ]:" + i_msg );                  // [---][009]
        window.alert( "[ F_ERROR ]:" + i_msg );                  // [---][009]
        throw(        "[ F_ERROR ]:" + i_msg );                  // [---][009]
                                                                 // [---][009]
    };;//:::::::::::::::::::::::::::::::::::::::::[ F_ERROR ]:// // [---][009]
    const   F_MESSAGE =( i_msg )=>{ //::::::::::::[ F_MSG   ]:// // [010][---]
                                                                 // [010][---]
        console.log( i_msg );                                    // [010][---]
                                                                 // [010][---]
    };;//:::::::::::::::::::::::::::::::::::::::::[ F_MSG   ]:// // [010][---]
    const   F_INPUT_MOUSE =( i_mev )=>{   //::::::::::::::::::// // [---][005]
    //:======================================================:// // [---][005]
                                                                 // [---][005]
        /** CODE_GOES_HERE **/                                   // [---][005]
                                                                 // [---][005]
    //:======================================================:// // [---][005]
    };;//:::::::::::::::::::::::::::::::::::[ F_INPUT_MOUSE ]:// // [---][005]
    const   F_INPUT_KEYBOARD =( i_kev )=>{   //:::::::::::::::// // [---][005]
    //:======================================================:// // [---][005]
                                                                 // [---][005]
        /** CODE_GOES_HERE **/                                   // [---][005]
                                                                 // [---][005]
    //:======================================================:// // [---][005]
    };;//::::::::::::::::::::::::::::::::[ F_INPUT_KEYBOARD ]:// // [---][005]
    const   F_LOOP_FOREVER =( )=>{  //::::::::::::::::::::::::// // [---][005]
                                                                 // [027]
        F_MESSAGE( "[_LOOPING_FOREVER_]" );                      // [027]
                                                                 // [---]
        const tri =( d_wgl.TRIANGLE_FAN );                       // [028]
        const poi =( d_wgl.POINTS       );                       // [028]
                                                                 // [---]
        //:#_ERASE_FOR_NEXT_DRAW_#:======================://     // [034]
                                                                 // [034]
            d_wgl.clearColor( 0.0, 1.0, 0.0, 1.0 );              // [034]
            d_wgl.clear( d_wgl.COLOR_BUFFER_BIT  );              // [034]
                                                                 // [034]
        //:======================:#_ERASE_FOR_NEXT_DRAW_#://     // [034]
                                                                 // [---]
        if( d_up1 >= 1 ){                                        // [---][029][---]
            d_wgl.useProgram( d_hp1         );                   // [---][029][028]
            d_wgl.drawArrays(   tri , 0 , 6 );                   // [036][029][028]
        };;                                                      // [---][029][---]
        if( d_up2 >= 1 ){                                        // [---][029][---]
            d_wgl.useProgram( d_hp2         );                   // [---][029][028]
            d_wgl.drawArrays(   poi , 0 , 1 );                   // [---][029][028]
        };;                                                      // [---][029][---]
        if( d_up3 >= 1 ){                                        // [---][029][---]
            d_wgl.useProgram( d_hp3         );                   // [---][029][028]
            d_wgl.drawArrays(   tri , 0 , 6 );                   // [036][029][028]
        };;                                                      // [---][029][---]
        if( d_up4 >= 1 ){                                        // [---][029][---]
            d_wgl.useProgram( d_hp4         );                   // [---][029][028]
            d_wgl.drawArrays(   poi , 0 , 1 );                   // [---][029][028]
        };;                                                      // [---][029][---]
                                                                 // [---]
        d_htm_win.requestAnimationFrame(     F_LOOP_FOREVER );   // [027]
    };;//::::::::::::::::::::::::::::::::::[ F_LOOP_FOREVER ]:// // [---][005]
    const   F_COMPILE_SHADER =( //::::::::::::::::[ COMPILE ]:// // [021][---]
                                                                 // [021][---]
        i_wso   //: @i_wso@ : INN - Webgl_Shader_Object :://     // [021][---]
    ,   i_tbm   //: @i_tbm@ : INN - Trace_Back_Message ::://     // [021][---]
                                                                 // [021][---]
    )=>{ //:::::::::::::::::::::::::::::::::::::::[ COMPILE ]:// // [021][015]
                                                                 // [---][015]
        const _C_ =( d_wgl.compileShader     .bind(d_wgl) );     // [---][015]
        const _P_ =( d_wgl.getShaderParameter.bind(d_wgl) );     // [---][015]
        const _S_ =( d_wgl.COMPILE_STATUS                 );     // [---][015]
        const _L_ =( d_wgl.getShaderInfoLog  .bind(d_wgl) );     // [---][015]
        const SRC =( d_wgl.getShaderSource   .bind(d_wgl) );     // [022][---]
                                                                 // [---][015]
                       _C_( i_wso );;;;;;;;;;;;;;;;;;;;;;;;;     // [---][015]
        if(    !     ( _P_( i_wso,_S_) ) ){ ////////////////     // [---][015]
            let err =( _L_( i_wso ) );                           // [022][BUG][015]
            let src =( SRC( i_wso ) );                           // [022][FIX][---]
            console.log( "[SHADER____TBM]:" + i_tbm  );;;;;;     // [---][021][---]
            console.log( "[SHADER____ERR]:" +   err  );;;;;;     // [022][BUG][015]
            console.log( "[SHADER____SRC]:" +   src  );;;;;;     // [022][FIX][---]
            F_ERROR( "[_$_YOUR_SHADER_IS_EVIL_$_]"   );;;;;;     // [---][015]
        };;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;     // [---][015]
                                                                 // [---][015]
    };;//:::::::::::::::::::::::::::::::::::::::::[ COMPILE ]:// // [---][015]
    const   F_LINK_PROGRAM =(                                    // [025][--------]
                                                                 // [025][--------]
        i_wpo   //: @i_wpo@ : INN - Webgl_Program_Object ://     // [025][--------]
    ,   i_tbm   //: @i_tbm@ : INN - Trace_Back_Message ::://     // [025][--------]
                                                                 // [025][--------]
    )=>{ //::::::::::::::::::::::::::::::::::::::::::[ LINK ]:// // [025][019][---]
                                                                 // [---][019][---]
        const L_P =( d_wgl.linkProgram        .bind(d_wgl));     // [---][019][---]
        const _P_ =( d_wgl.getProgramParameter.bind(d_wgl));     // [---][019][---]
        const _S_ =( d_wgl.LINK_STATUS                    );     // [---][019][---]
        const _L_ =( d_wgl.getProgramInfoLog  .bind(d_wgl));     // [---][019][---]
                                                                 // [---][019][---]
                       L_P( i_wpo );;;;;;;;;;;;;;;;;;;;;;;;;     // [---][019][---]
        if(    !     ( _P_( i_wpo,_S_) ) ){ ////////////////     // [---][019][---]
            let err =( _L_( i_wpo ) );                           // [025][BUG][019][---]
            console.log( "[PROGRAM____TBM]:" + i_tbm );;;;;;     // [025][-------------]
            console.log( "[PROGRAM____ERR]:" +   err );;;;;;     // [025][BUG][019][---]
            F_ERROR( "[_$_YOUR_PROGRAM_IS_EVIL_$_]"  );;;;;;     // [---][019][---]
        };;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;     // [---][019][---]
                                                                 // [---][019][---]
    };;//::::::::::::::::::::::::::::::::::::::::::::[ LINK ]:// // [---][019][---]
    //:======================================================:// // [049][---]
    const   F_UNIFORM_PUT =( //:::::::::::::::::::[ UNI_PUT ]:// // [049][---]
        i_program //: Handle to PROGRAM ://                      // [049][---]
    ,   i_uni_han //: Uniform's HANDLE  ://                      // [049][---]
    ,   i_uni_val //: Uniform's VALUE   ://                      // [049][---]
    )=>{                                                         // [049][---]
        const PROGRAM =( d_wgl.useProgram.bind( d_wgl ) );       // [049][---]
        const UNI_PUT =( d_wgl.uniform1i .bind( d_wgl ) );       // [049][---]
                                                                 // [049][---]
        PROGRAM( i_program );;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;     // [049][---]
        UNI_PUT( i_uni_han , i_uni_val );;;;;;;;;;;;;;;;;;;;     // [049][---]
                                                                 // [049][---]
    };;//:::::::::::::::::::::::::[ F_UNIFORM_PUT / UNI_PUT ]:// // [049][---]
    //:======================================================:// // [049][---]
    const   F_UNIFORM_PUT_HP1=( i_uni_han , i_uni_val )=>   //// // [049][---]         
    {       F_UNIFORM_PUT(d_hp1,i_uni_han , i_uni_val ); };;;;;; // [049][---]
    //:======================================================:// // [049][---]
    const   F_UNIFORM_PUT_HP2=( i_uni_han , i_uni_val )=>   //// // [049][---]         
    {       F_UNIFORM_PUT(d_hp2,i_uni_han , i_uni_val ); };;;;;; // [049][---]
    //:======================================================:// // [049][---]
    const   F_UNIFORM_PUT_HP3=( i_uni_han , i_uni_val )=>   //// // [049][---]          
    {       F_UNIFORM_PUT(d_hp3,i_uni_han , i_uni_val ); };;;;;; // [049][---]
    //:======================================================:// // [049][---]
    const   F_UNIFORM_PUT_HP4=( i_uni_han , i_uni_val )=>   //// // [049][---]      
    {       F_UNIFORM_PUT(d_hp4,i_uni_han , i_uni_val ); };;;;;; // [049][---]
    //:======================================================:// // [049][---]
    const   F_SETUP =( )=>{   //::::::::::::::::::::::::::::::// // [---][005]
    //:======================================================:// // [---][005]
                                                                 // [---]
        window.alert( "[HELLO_WORLD]" );                         // [006][MOV][001]
                                                                 // [---]
        //:#_SETUP_FUNCTION_POINTERS_#:==================://     // [---][009]
                                                                 // [---][009]
            const ERR =( F_ERROR   );                            // [---][009]
            const MSG =( F_MESSAGE );                            // [010][---]
                                                                 // [---][009]
        //:==================:#_SETUP_FUNCTION_POINTERS_#://     // [---][009]
        //:#_BASIC_DOM_SETUP_#:==========================://     // [---][008]
                                                                 // [---][008]
            d_htm_win =( window               );                 // [---][008]
            d_htm_doc =( window.document      );                 // [---][008]
            d_htm_bod =( window.document.body );                 // [---][008]
            if( ! d_htm_bod ){                                   // [---][008]
                                                                 // [---][008]
                d_htm_bod = d_htm_doc.createElement("body");     // [---][008]
                d_htm_doc.body =( d_htm_bod );                   // [---][008]
                MSG( "[_$_BODY_CREATED_AND_APPENDED_$_]" );;     // [010][---]
                                                                 // [---][008]
            };;                                                  // [---][008]
        //:==========================:#_BASIC_DOM_SETUP_#://     // [---][008]
        //:#_BASIC_DOM_CHECK_#:==========================://     // [---][009]
                                                                 // [---][009]
            if( ! d_htm_win ){ ERR( "[d_htm_win]" ); };;         // [---][009]
            if( ! d_htm_doc ){ ERR( "[d_htm_doc]" ); };;         // [---][009]
            if( ! d_htm_bod ){ ERR( "[d_htm_bod]" ); };;         // [---][009]
                                                                 // [---][009]
        //:==========================:#_BASIC_DOM_CHECK_#://     // [---][009]
        //:#_ADVANCED_DOM_SETUP_#:=======================://     // [047]
                                                                 // [047]
            //:#_REMOVE_SCROLL_BARS_#:-------------------://     // [047]
            {                                                    // [047]
                let b_s =( d_htm_bod.style );                    // [047]
                    b_s.padding  = "0"      ;                    // [047]
                    b_s.margin   = "0"      ;                    // [047]
                    b_s.overflow = "hidden" ;                    // [047]
                    b_s.scroll   = "no"     ;//: IE_ONLY ://     // [047]
            }                                                    // [047]
            //:-------------------:#_REMOVE_SCROLL_BARS_#://     // [047]
                                                                 // [047]
        //:=======================:#_ADVANCED_DOM_SETUP_#://     // [047]
        //:#_BASIC_GRAPHICS_SETUP_#:=====================://     // [---][011]
                                                                 // [---][011]
            d_htm_can =(d_htm_doc.createElement("canvas"));;     // [---][011]
            d_htm_bod.appendChild( d_htm_can );;;;;;;;;;;;;;     // [035][---]
            d_htm_can.width =( 512 );;;;;;;;;;;;;;;;;;;;;;;;     // [---][011]
            d_htm_can.height=( 512 );;;;;;;;;;;;;;;;;;;;;;;;     // [---][011]
                                                                 // [---][011]
            d_wgl     =(d_htm_can.getContext( c_wvc ));;;;;;     // [012][011]
                                                                 // [---][011]
        //:=====================:#_BASIC_GRAPHICS_SETUP_#://     // [---][011]
        //:#_BASIC_GRAPHICS_CHECK_#:=====================://     // [---][011]
                                                                 // [---][011]
            if( ! d_htm_can ){ ERR( "[d_htm_can]" ); };;;;;;     // [---][011]
            if( ! d_wgl     ){ ERR( "[d_wgl.___]" ); };;;;;;     // [---][011]
                                                                 // [---][011]
        //:=====================:#_BASIC_GRAPHICS_CHECK_#://     // [---][011]
        //:#_CREATE_EMPTY_SHADER_PROGRAMS_#:=============://     // [---][014]
                                                                 // [---][014]
            const C_S =( d_wgl.createShader.bind(d_wgl) );;;     // [---][014]
            const _v_ =( d_wgl.VERTEX_SHADER   );;;;;;;;;;;;     // [---][014]
            const _f_ =( d_wgl.FRAGMENT_SHADER );;;;;;;;;;;;     // [---][014]
                                                                 // [---][014]
                             //:@VSO@:Vertex_Shader_Obj  ://     // [---][014]
            d_hv1=(C_S(_v_));//: VSO.GAME_MAP     :::::::://     // [---][014]
            d_hv2=(C_S(_v_));//: VSO.GAME_SPRITE  :::::::://     // [---][014]
            d_hv3=(C_S(_v_));//: VSO.MENU_MAP     :::::::://     // [---][014]
            d_hv4=(C_S(_v_));//: VSO.MENU_SPRITE  :::::::://     // [---][014]
                             //: @sv#@ : Shader_Vertex   ://     // [---][014]
                             ///////////////////////////////     // [---][014]
                             //:@FSO@:Fragment_Shader_Obj://     // [---][014]
            d_hf1=(C_S(_f_));//: FSO.GAME_MAP     :::::::://     // [---][014]
            d_hf2=(C_S(_f_));//: FSO.GAME_SPRITE  :::::::://     // [---][014]
            d_hf3=(C_S(_f_));//: FSO.MENU_MAP     :::::::://     // [---][014]
            d_hf4=(C_S(_f_));//: FSO.MENU_SPRITE  :::::::://     // [---][014]
                             //: @sf#@ : Shader_Fragment ://     // [---][014]
                                                                 // [---][014]
        //:=============:#_CREATE_EMPTY_SHADER_PROGRAMS_#://     // [---][014]
        //:#_CREATE_EMPTY_RENDER_PIPELINES_#:============://     // [---][016]
                                                                 // [---][016]
            const C_P =(d_wgl.createProgram.bind(d_wgl));;;;     // [---][016]
                                                                 // [---][016]
            d_hp1=( C_P() ); //: Program #1 - GAME_TILE :://     // [018][016]
            d_hp2=( C_P() ); //: Program #2 - GAME_SPRITE://     // [018][016]
            d_hp3=( C_P() ); //: Program #3 - MENU_TILE :://     // [018][016]
            d_hp4=( C_P() ); //: Program #4 - MENU_SPRITE://     // [018][016]
                                                                 // [---][016]
        //:============:#_CREATE_EMPTY_RENDER_PIPELINES_#://     // [---][016]
        //:#_ATTACH_SHADERS_TO_PROGRAM_#:================://     // [---][017]
                                                                 // [--------]
            const A_S =(d_wgl.attachShader.bind(d_wgl));;;;;     // [---][017]
                                                                 // [---][---]
            //:#_ATTACH_VERTEX_SHADERS_#:================://     // [026][-------------]
                                                                 // [026][-------------]
                A_S( d_hp1 , d_hv1 );//:  GAME_TILE   :::://     // [026][BUG][018][017]
                A_S( d_hp2 , d_hv2 );//:  GAME_SPRITE :::://     // [026][BUG][018][017]
                A_S( d_hp3 , d_hv3 );//:  MENU_TILE   :::://     // [026][BUG][018][017]
                A_S( d_hp4 , d_hv4 );//:  MENU_SPRITE :::://     // [026][BUG][018][017]
                                                                 // [026][-------------]
            //:================:#_ATTACH_VERTEX_SHADERS_#://     // [026][-------------]
            //:#_ATTACH_FRAGMENT_SHADERS_#:==============://     // [026][-------------]
                                                                 // [026][-------------]
                A_S( d_hp1 , d_hf1 );//:  GAME_TILE   :::://     // [026][FIX][018][017]
                A_S( d_hp2 , d_hf2 );//:  GAME_SPRITE :::://     // [026][FIX][018][017]
                A_S( d_hp3 , d_hf3 );//:  MENU_TILE   :::://     // [026][FIX][018][017]
                A_S( d_hp4 , d_hf4 );//:  MENU_SPRITE :::://     // [026][FIX][018][017]
                                                                 // [026][-------------]
            //:#_ATTACH_FRAGMENT_SHADERS_#:==============://     // [026][-------------]
                                                                 // [---][---]
        //:================:#_ATTACH_SHADERS_TO_PROGRAM_#://     // [---][017]
        //:#_ADD_SOURCE_CODE_STRINGS_#:==================://     // [023]
                                                                 // [023]
            const S_S =(d_wgl.shaderSource.bind(d_wgl));;;;;     // [023]
                                                                 // [023]
            //:#_LOAD_ALL_SOURCE_VERTEX_#:===============://     // [023]
                                                                 // [023]
                S_S( d_hv1 , d_sv1 );                            // [023]
                S_S( d_hv2 , d_sv2 );                            // [023]
                S_S( d_hv3 , d_sv3 );                            // [023]
                S_S( d_hv4 , d_sv4 );                            // [023]
                                                                 // [023]
            //:===============:#_LOAD_ALL_SOURCE_VERTEX_#://     // [023]
            //:#_LOAD_ALL_SOURCE_FRAGMENT_#:=============://     // [023]
                                                                 // [023]
                S_S( d_hf1 , d_sf1 );                            // [023]
                S_S( d_hf2 , d_sf2 );                            // [023]
                S_S( d_hf3 , d_sf3 );                            // [023]
                S_S( d_hf4 , d_sf4 );                            // [023]
                                                                 // [023]
            //:=============:#_LOAD_ALL_SOURCE_FRAGMENT_#://     // [023]
                                                                 // [023]
        //:==================:#_ADD_SOURCE_CODE_STRINGS_#://     // [023]
        //:#_COMPILE_AND_LINK_#:=========================://     // [---][020]
                                                                 // [---][020]
            //:#_COMPILE_ALL_VERTEX_SHADERS_#:===========://     // [---][020]
                                                                 // [---][020]
                F_COMPILE_SHADER( d_hv1 , "[_d_hv1_]" );;;;;     // [021][020]
                F_COMPILE_SHADER( d_hv2 , "[_d_hv2_]" );;;;;     // [021][020]
                F_COMPILE_SHADER( d_hv3 , "[_d_hv3_]" );;;;;     // [021][020]
                F_COMPILE_SHADER( d_hv4 , "[_d_hv4_]" );;;;;     // [021][020]
                                                                 // [---][020]
            //:===========:#_COMPILE_ALL_VERTEX_SHADERS_#://     // [---][020]
            //:#_COMPILE_ALL_FRAGMENT_SHADERS_#:=========://     // [---][020]
                                                                 // [---][020]
                F_COMPILE_SHADER( d_hf1 , "[_d_hf1_]" );;;;;     // [021][020]
                F_COMPILE_SHADER( d_hf2 , "[_d_hf2_]" );;;;;     // [021][020]
                F_COMPILE_SHADER( d_hf3 , "[_d_hf3_]" );;;;;     // [021][020]
                F_COMPILE_SHADER( d_hf4 , "[_d_hf4_]" );;;;;     // [021][020]
                                                                 // [---][020]
            //:=========:#_COMPILE_ALL_FRAGMENT_SHADERS_#://     // [---][020]
            //:#_LINK_YOUR_FOUR_PROGRAMS_#:==============://     // [---][020]
                                                                 // [---][020]
                F_LINK_PROGRAM(   d_hp1 , "[_d_hp1_]" );;;;;     // [025][020]
                F_LINK_PROGRAM(   d_hp2 , "[_d_hp2_]" );;;;;     // [025][020]
                F_LINK_PROGRAM(   d_hp3 , "[_d_hp3_]" );;;;;     // [025][020]
                F_LINK_PROGRAM(   d_hp4 , "[_d_hp4_]" );;;;;     // [025][020]
                                                                 // [---][020]
            //:==============:#_LINK_YOUR_FOUR_PROGRAMS_#://     // [---][020]
                                                                 // [---][020]
        //:=========================:#_COMPILE_AND_LINK_#://     // [---][020]
        //:#_SETUP_TEXTURE_001_#:========================://     // [---][037]
        {                                                        // [---][037]
            const t2d=( d_wgl.TEXTURE_2D             );;         // [---][037]
            const ati=( d_wgl.TEXTURE0 + c_p2k_tui   );;         // [---][037]
                                                                 // [---][037]
            d_p2k_cpu =( new Uint8Array(4*2048*2048) );;         // [---][037]
            d_p2k_tex =( d_wgl.createTexture() );;;;;;;;         // [---][037]
            d_wgl.activeTexture( ati );;;;;;;;;;;;;;;;;;         // [---][037]
            d_wgl.bindTexture(   t2d , d_p2k_tex );;;;;;         // [---][037]
        }                                                        // [---][037]
        //:========================:#_SETUP_TEXTURE_001_#://     // [---][037]
        //:#_SETUP_TEXTURE_002_#:========================://     // [---][038][---]
        {                                                        // [---][038][---]
            const __must_do_before_tex_image_2d__=0 ////         // [---][038][---]
            ////                                  //////         // [---][038][---]
            ,   t2d = d_wgl.TEXTURE_2D            //////         // [---][038][---]
            ,   _n_ = d_wgl.NEAREST               //////         // [---][038][---]
            ,   _e_ = d_wgl.CLAMP_TO_EDGE         //////         // [---][038][---]
            ,   min = d_wgl.TEXTURE_MIN_FILTER    //////         // [---][038][---]
            ,   mag = d_wgl.TEXTURE_MAG_FILTER    //////         // [---][038][---]
            ,   _s_ = d_wgl.TEXTURE_WRAP_S        //////         // [---][038][---]
            ,   _t_ = d_wgl.TEXTURE_WRAP_T        //////         // [---][038][---]
            ,   u_a = d_wgl.UNPACK_ALIGNMENT      //////         // [---][038][---]
            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;         // [---][038][---]
                                                                 // [---][038][---]
            d_wgl.texParameteri( t2d, min , _n_ );;;;;;;         // [---][038][---]
            d_wgl.texParameteri( t2d, mag , _n_ );;;;;;;         // [---][038][---]
            d_wgl.texParameteri( t2d, _s_ , _e_ );;;;;;;         // [---][038][---]
            d_wgl.texParameteri( t2d, _t_ , _e_ );;;;;;;         // [---][038][---]
                                                    ;;;;         // [---][038][---]
            d_wgl.pixelStorei(   u_a      , (4) );;;;;;;         // [---][038][---]
        }                                                        // [---][038][---]
        //:========================:#_SETUP_TEXTURE_002_#://     // [---][038][---]
        //:#_SETUP_TEXTURE_003_#:========================://     // [---][039][---]
                                                                 // [---][039][---]
           d_wgl.texImage2D(   //:--:[ T_I_2_D ]:::::::::://     // [---][039][---]
                d_wgl.TEXTURE_2D    //:$_T_O_T_$:::::::::://     // [---][039][---]
            ,   0                   //:$_L_O_D_$:::::::::://     // [---][039][---]
            ,   d_wgl.RGBA8UI       //:$_C_FMT_$:::::::::://     // [---][039][---]
                //:-----------------------------:::::::::://     // [---][039][---]
            ,   2048     //: WIDTH  / PIX_WID   :::::::::://     // [---][039][---]
            ,   2048     //: HEIGHT / PIX_HIG   :::::::::://     // [---][039][---]
            ,   0        //: BORDER             :::::::::://     // [---][039][---]
                //:-----------------------------:::::::::://     // [---][039][---]
            ,   d_wgl.RGBA_INTEGER  //:$_G_FMT_$:::::::::://     // [---][039][---]
            ,   d_wgl.UNSIGNED_BYTE //:$_G_FMT_$:::::::::://     // [---][039][---]
            ,   d_p2k_cpu //: ARRAY_BUFFER_VIEW :::::::::://     // [---][039][---]
            );; //:-----------------:[ T_I_2_D ]:::::::::://     // [---][039][---]
                                                                 // [---][039][---]
        //:========================:#_SETUP_TEXTURE_003_#://     // [---][039][---]
        //:#_SETUP_TEXTURE_SAMPLER_#:====================://     // [---][040][---]
        {                                                        // [---][040][---]
            let _0_ =( 0 /** @_0_@ : $_EXP_ZER_OS_$ **/ );;;     // [---][040][---]
            const G =( d_wgl );;;;;;;;;;;;;;;;;;;;;;;;;;;;;;     // [---][040][---]
            const UNI_GET =( G.getUniformLocation.bind(G) );     // [---][040][---]
            const UNI_PUT =( "[USE:UP1|UP2|UP3|UP4]" );;;;;;     // [050][040][---]
            const PUT_HP1 =( F_UNIFORM_PUT_HP1 );//:[UP1]://     // [050][--------]
            const PUT_HP2 =( F_UNIFORM_PUT_HP2 );//:[UP2]://     // [050][--------]
            const PUT_HP3 =( F_UNIFORM_PUT_HP3 );//:[UP3]://     // [050][--------]
            const PUT_HP4 =( F_UNIFORM_PUT_HP4 );//:[UP4]://     // [050][--------]
                                                                 // [---][040][---]
            //:#_GET_SAMPLER_LOC_IN_GPU_#:===============://     // [---][040][---]
                                                                 // [---][040][---]
                d_p2k_v1l=UNI_GET( d_hp1 ,  c_p2k_v1u  );;;;     // [042][REF][040][---]
                d_p2k_v2l=UNI_GET( d_hp2 ,  c_p2k_v2u  );;;;     // [042][REF][040][---]
                d_p2k_v3l=UNI_GET( d_hp3 ,  c_p2k_v3u  );;;;     // [042][REF][040][---]
                d_p2k_v4l=UNI_GET( d_hp4 ,  c_p2k_v4u  );;;;     // [042][REF][040][---]
                                                                 // [042][REF][---][---]
                d_p2k_f1l=UNI_GET( d_hp1 ,  c_p2k_f1u  );;;;     // [042][REF][040][---]
                d_p2k_f2l=UNI_GET( d_hp2 ,  c_p2k_f2u  );;;;     // [042][REF][040][---]
                d_p2k_f3l=UNI_GET( d_hp3 ,  c_p2k_f3u  );;;;     // [042][REF][040][---]
                d_p2k_f4l=UNI_GET( d_hp4 ,  c_p2k_f4u  );;;;     // [042][REF][040][---]
                                                                 // [---][040][---]
            //:===============:#_GET_SAMPLER_LOC_IN_GPU_#://     // [---][040][---]
            //:#_PUT_SAMPLER_VAL_IN_GPU_#:===============://     // [---][040][---]
                                                                 // [---][040][---]
                PUT_HP1( d_p2k_v1l  ,  _0_ + c_p2k_tui );;;;     // [050][REF][042][REF][040][---]
                PUT_HP2( d_p2k_v2l  ,  _0_ + c_p2k_tui );;;;     // [050][REF][042][REF][040][---]
                PUT_HP3( d_p2k_v3l  ,  _0_ + c_p2k_tui );;;;     // [050][REF][042][REF][040][---]
                PUT_HP4( d_p2k_v4l  ,  _0_ + c_p2k_tui );;;;     // [050][REF][042][REF][040][---]
                                                                 // [050][REF][042][REF][040][---]
                PUT_HP1( d_p2k_f1l  ,  _0_ + c_p2k_tui );;;;     // [050][REF][042][REF][040][---]
                PUT_HP2( d_p2k_f2l  ,  _0_ + c_p2k_tui );;;;     // [050][REF][042][REF][040][---]
                PUT_HP3( d_p2k_f3l  ,  _0_ + c_p2k_tui );;;;     // [050][REF][042][REF][040][---]
                PUT_HP4( d_p2k_f4l  ,  _0_ + c_p2k_tui );;;;     // [050][REF][042][REF][040][---]
                                                                 // [---][040][---]
            //:===============:#_PUT_SAMPLER_VAL_IN_GPU_#://     // [---][040][---]
            //:#_ERROR_CHECK_SAMPLERS_#:=================://     // [043]
            {                                                    // [043]
                const ERR =( F_ERROR );                          // [043]
                                                                 // [043]
                if( ! d_p2k_v1l ){ ERR( "[_d_p2k_v1l_]" );};     // [043]
                if( ! d_p2k_v2l ){ ERR( "[_d_p2k_v2l_]" );};     // [043]
                if( ! d_p2k_v3l ){ ERR( "[_d_p2k_v3l_]" );};     // [043]
                if( ! d_p2k_v4l ){ ERR( "[_d_p2k_v4l_]" );};     // [043]
                                                                 // [043]
                if( ! d_p2k_f1l ){ ERR( "[_d_p2k_f1l_]" );};     // [043]
                if( ! d_p2k_f2l ){ ERR( "[_d_p2k_f2l_]" );};     // [043]
                if( ! d_p2k_f3l ){ ERR( "[_d_p2k_f3l_]" );};     // [043]
                if( ! d_p2k_f4l ){ ERR( "[_d_p2k_f4l_]" );};     // [043]
            }                                                    // [043]
            //:=================:#_ERROR_CHECK_SAMPLERS_#://     // [043]
        }                                                        // [---][040][---]
        //:====================:#_SETUP_TEXTURE_SAMPLER_#://     // [---][040][---]
                                                                 // [---][---]
    //:======================================================:// // [---][005]
    };;//:::::::::::::::::::::::::::::::::::::::::[ F_SETUP ]:// // [---][005]
    const   F_VIEW_SNAP =( )=>{   //::::::::::::::::::::::::::// // [033]
    //:======================================================:// // [033]
                                                                 // [033]
        const ox0 =( 0 /** Origin X === 0 **/ );                 // [033]
        const oy0 =( 0 /** Origin Y === 0 **/ );                 // [033]
                                                                 // [033]
        let wid =( d_htm_win.innerWidth );                       // [033]
        let hig =( d_htm_win.innerHeight);                       // [033]
                                                                 // [033]
        d_htm_can.width =( wid );                                // [033]
        d_htm_can.height=( hig );                                // [033]
                                                                 // [033]
        d_wgl.viewport( ox0,oy0,wid,hig );                       // [033]
                                                                 // [033]
    //:======================================================:// // [033]
    };;//:::::::::::::::::::::::::::::::::::::[ F_VIEW_SNAP ]:// // [033]
                                                                 // [---][---]
//:===========================================:#_F_FUNCTION_#:// // [---][004][---]
//:#_M_MAIN_#:===============================================:// // [006]
    (( int_main_void )=>{  //::::::::::::::::::::::::[ MAIN ]:// // [006]
                                                                 // [---]
        F_SETUP();                                               // [006]
        F_VIEW_SNAP();;;;   //: $_SNAP_TO_CLIENT_AREA_$ :://     // [033]
        F_LOOP_FOREVER();                                        // [027]
                                                                 // [---]
    })( /**IIFE**/ );; //::::::::::::::::::::::::::::[ MAIN ]:// // [006]
//:===============================================:#_M_MAIN_#:// // [006]
//| Code Section Is Above This Point                         |// // [---][001]
//+==========================================================+// // [---][001]
//+==========================================================+// // [---][001]
//| Comments Section Is Below This Point                     |// // [---][001]
//+==========================================================+// // [---][001]
/** ******************************************************** *** // [---][001]
#_NAME_LIST_# :================================================: // [048]
                                  TAG[ $_IDENTIFIER_GLOSSERY_$ ] // [048]
                                  TAG[ $_IDENITIFER_GLOSSARY_$ ] // [048]
                                  TAG[ $_IDENTIFIER_INDEX_$    ] // [048]
                                  TAG[ $_NAME_INDEX_$ ________ ] // [048]
                                                               | // [048]
    @tik@ : Tick as in "game tick timer"                       | // [048]
    @dir@ : Dir as in "Dirty Flag" , can also mean "Direction" | // [048]
                                                               | // [048]
           @U__R__I@: Uniform__Relative__Index ( 2 "_" )       | // [048]
                                                               | // [048]
    @v1l@ : U__R__I : Viewport_1_edge_LEF  ( ADDR[ vp1_lef ] ) | // [048]
    @v1r@ : U__R__I : Viewport_1_edge_RIG  ( ADDR[ vp1_rig ] ) | // [048]
    @v1t@ : U__R__I : Viewport_1_edge_TOP  ( ADDR[ vp1_top ] ) | // [048]
    @v1b@ : U__R__I : Viewport_1_edge_BOT  ( ADDR[ vp1_bot ] ) | // [048]
                                                               | // [048]
    @v0l@ : U__R__I : Viewport_0_edge_LEF  ( ADDR[ vp0_lef ] ) | // [048]
    @v0r@ : U__R__I : Viewport_0_edge_RIG  ( ADDR[ vp0_rig ] ) | // [048]
    @v0t@ : U__R__I : Viewport_0_edge_TOP  ( ADDR[ vp0_top ] ) | // [048]
    @v0b@ : U__R__I : Viewport_0_edge_BOT  ( ADDR[ vp0_bot ] ) | // [048]
                                                               | // [048]
    @vcl@ : U__R__I : Viewport_C_edge_LEF  ( ADDR[ vpc_lef ] ) | // [048]
    @vcr@ : U__R__I : Viewport_C_edge_RIG  ( ADDR[ vpc_rig ] ) | // [048]
    @vct@ : U__R__I : Viewport_C_edge_TOP  ( ADDR[ vpc_top ] ) | // [048]
    @vcb@ : U__R__I : Viewport_C_edge_BOT  ( ADDR[ vpc_bot ] ) | // [048]
                                                               | // [048]
:================================================: #_NAME_LIST_# // [048]
#_KANJIS_TILEMAP_BASE_# :======================================: // [---][001]
                                                                 // [---][001]
    Goal : Create a tilemap project who's source code            // [---][001]
         : can be used any time you want to do a quick           // [---][001]
         : tilemap rendering experiment. It should be            // [---][001]
         : flexible enough to use is as a library that           // [---][001]
         : can be used for the[ MKB ]project.                    // [---][001]
         : @MKB@ : Magic Kyoot Ball.                             // [---][001]
                                                                 // [---][001]
    Structure : 1 shader for tilemap stuff                       // [---][001]
              : 1 shader for sprite rendering stuff.             // [---][001]
              : 1 shader for tilemap menu stuff                  // [---][001]
              : 1 shader for sprite MENU rendering.              // [---][001]
                                                                 // [---][001]
    Uniforms  : Only 4 uniforms. 1 for each texture              // [---][001]
              : sampler we need. Everything else is              // [---][001]
              : encoded into texture memory somehow.             // [---][001]
                                                                 // [---][001]
:======================================: #_KANJIS_TILEMAP_BASE_# // [---][001]
#_C_CONSTANT_# :===============================================: // [007]
                                                                 // [007]
    Constants are single integers or strings that are            // [007]
    immutable. Complex immutable data does __NOT__ belong        // [007]
    in the constant section. Constants must be expressible       // [007]
    as "#define" macros in C99.                                  // [007]
                                                                 // [007]
    For example : A lookup table does not go in the              // [007]
                : constant section, even though it is            // [007]
                : an immutable array of values.                  // [007]
                                                                 // [007]
:===============================================: #_C_CONSTANT_# // [007]
#_D_DATA_# :===================================================: // [---][004][002]
                             TAG[  D_FOR_DATA_WHICH_IS_GLOBAL  ] // [---][004][---]
                             TAG[ _D_FOR_DATA_WHICH_IS_GLOBAL_ ] // [---][004][---]
                                                                 // [---][002]
    Anything that ends up colliding with "AIM.JS"                // [---][002]
    will get further prefix of "ktb_" "                          // [---][002]
    So, if[ d_p2k_000 ]collides, with "AIM.JS" then              // [---][002]
    [ d_p2k_000 ]becomes[ ktb_d_p2k_000 ].                       // [---][002]
                                                                 // [---][002]
                                                                 // [---][002]
    All mutable data or complex immutable data goes here.        // [---][002]
    The global/toplevel stuff. The filescope stuff.              // [---][002]
                                                                 // [---][002]
:===================================================: #_D_DATA_# // [---][004][002]
#_F_FUNCTION_# :===============================================: // [---][007]
                                                                 // [---][007]
    Functions go in this section and start with an "F".          // [---][007]
                                                                 // [---][007]
:===============================================: #_F_FUNCTION_# // [---][007]
#_M_MAIN_# :===================================================: // [---][007]
                                                                 // [---][007]
    Though this is a JAVASCRIPT file, we will be using           // [---][007]
    a "C99 Style". So we wil pretend this is our                 // [---][007]
    "MAIN" right here.                                           // [---][007]
                                                                 // [---][007]
:===================================================: #_M_MAIN_# // [---][007]
#_BASIC_DOM_SETUP_# :==========================================: // [---][008]
                                                                 // [---][008]
    Bare basic domain object model (DOM) setup.                  // [---][008]
    I H_A_T_E writing HTML, so we are going to do                // [---][008]
    as little of that as required to get setup.                  // [---][008]
                                                                 // [---][008]
:==========================================: #_BASIC_DOM_SETUP_# // [---][008]
#_SETUP_FUNCTION_POINTERS_# :==================================: // [---][009]
                                                                 // [---][009]
    Function pointers within setup function to help make         // [---][009]
    the code more terse, as our column space here is             // [---][009]
    very precious to us.                                         // [---][009]
                                                                 // [---][009]
:==================================: #_SETUP_FUNCTION_POINTERS_# // [---][009]
#_BASIC_DOM_CHECK_# :==========================================: // [---][009]
                                                                 // [---][009]
    Make sure the basic DOM setup was done correctly.            // [---][009]
    All object references should be non null.                    // [---][009]
                                                                 // [---][009]
:==========================================: #_BASIC_DOM_CHECK_# // [---][009]
$_BODY_CREATED_AND_APPENDED_$ :================================: // [---][010]
                                                                 // [---][010]
    The [ .HTM / .HTML ]file did not start with a body.          // [---][010]
    ( This can happen with BARE_MINIMUM_HTML_FILE )              // [---][010]
    We added a body object to the file and have                  // [---][010]
    notified you.                                                // [---][010]
                                                                 // [---][010]
:================================: $_BODY_CREATED_AND_APPENDED_$ // [---][010]
#_BASIC_GRAPHICS_SETUP_# :=====================================: // [---][011]
                                                                 // [---][011]
    Get a webgl context , which is basically OpenGL              // [---][011]
    with a few stupid-ass object oriented modifications.         // [---][011]
                                                                 // [---][011]
:=====================================: #_BASIC_GRAPHICS_SETUP_# // [---][011]
#_BASIC_GRAPHICS_CHECK_# :=====================================: // [---][011]
                                                                 // [---][011]
    Make sure we were able to create a webgl context.            // [---][011]
    Otherwise, abort mission and give up forever.                // [---][011]
    Decide to stop being a programmer after 15 years             // [---][011]
    and go work on an oil rig in the middle of alaska            // [---][011]
    where I fist fight polar bears in my off time.               // [---][011]
                                                                 // [---][011]
:=====================================: #_BASIC_GRAPHICS_CHECK_# // [---][011]
#_D_DATA_SHADER_001_# :========================================: // [---][013][---]
                                                                 // [---][013][---]
    @SHADER_001@ : VERTEX+FRAGMENT game __TILE_MAP__ shader.     // [---][013][---]
                                                                 // [---][013][---]
:========================================: #_D_DATA_SHADER_001_# // [---][013][---]
#_D_DATA_SHADER_002_# :========================================: // [---][013][---]
                                                                 // [---][013][---]
    @SHADER_002@ : VERTEX+FRAGMENT game POINT_SPRITE shader.     // [---][013][---]
                                                                 // [---][013][---]
:========================================: #_D_DATA_SHADER_002_# // [---][013][---]
#_D_DATA_SHADER_003_# :========================================: // [---][013][---]
                                                                 // [---][013][---]
    @SHADER_003@ : VERTEX+FRAGMENT menu __TILE_MAP__ shader.     // [---][013][---]
                                                                 // [---][013][---]
:========================================: #_D_DATA_SHADER_003_# // [---][013][---]
#_D_DATA_SHADER_004_# :========================================: // [---][013][---]
                                                                 // [---][013][---]
    @SHADER_004@ : VERTEX+FRAGMENT menu POINT_SPRITE shader.     // [---][013][---]
                                                                 // [---][013][---]
:========================================: #_D_DATA_SHADER_004_# // [---][013][---]
?_ADVANCED_GRAPHICS_SETUP_? :==================================: // [---][014]
                                                                 // [---][014]
    A "?" around a section marker means it is an orphaned        // [---][014]
    section marker that does not link into the                   // [---][014]
    code section of the file.                                    // [---][014]
                                                                 // [---][014]
    There is no "ADVANCED_GRAPHICS_SETUP" section ,              // [---][014]
    because all of tha setup code is spanned amongst             // [---][014]
    many different sections following the                        // [---][014]
    "BASCI_GRAPHICS_SETUP" code sections.                        // [---][014]
                                                                 // [---][014]
:==================================: ?_ADVANCED_GRAPHICS_SETUP_? // [---][014]
#_CREATE_EMPTY_SHADER_PROGRAMS_# :=============================: // [---][014]
                                                                 // [---][014]
    Create the empty shader programs that will need to           // [---][014]
    be filled with the shader source code strings                // [---][014]
    eventually.                                                  // [---][014]
                                                                 // [---][014]
    We have 8 shader programs because we have 4                  // [---][014]
    shader pipelines and 2 shaders per pipeline.                 // [---][014]
                                                                 // [---][014]
:=============================: #_CREATE_EMPTY_SHADER_PROGRAMS_# // [---][014]
$_YOUR_SHADER_IS_EVIL_$ :======================================: // [---][015][---]
                                                                 // [---][015][---]
    Your shader is evil and that is why it isn't working.        // [---][015][---]
    Syntax errors are the devil's work.                          // [---][015][---]
                                                                 // [---][015][---]
:======================================: $_YOUR_SHADER_IS_EVIL_$ // [---][015][---]
#_CREATE_EMPTY_RENDER_PIPELINES_# :============================: // [---][016][---]
                                                                 // [---][016][---]
    Create the empty program objects the represent a             // [---][016][---]
    "rendering pipeline" these program objects need              // [---][016][---]
    to be "filled with" ( reference ) the shader                 // [---][016][---]
    programs. At minimum a complete program object               // [---][016][---]
    needs a vertex shader and fragment shader stage.             // [---][016][---]
                                                                 // [---][016][---]
    A truely minimal setup just needs the                        // [---][016][---]
    "GLSL Version Directive" at the top of the                   // [---][016][---]
    file on its OWN LINE and nothing else.                       // [---][016][---]
                                                                 // [---][016][---]
    Version Directive Must Be :                                  // [---][016][---]
                                                                 // [---][016][---]
        1. On it's own line.                                     // [---][016][---]
        2. NOTHING AT END OF LINE , NOT EVEN COMMENTS            // [---][016][---]
        3. No extra spaces before or after directive.            // [---][016][---]
                                                                 // [---][016][---]
    The version directive is super fucky picky.                  // [---][016][---]
    The version directive is WORSE THAN PYTHON                   // [---][016][---]
    when it comes to "white space".                              // [---][016][---]
                                                                 // [---][016][---]
:============================: #_CREATE_EMPTY_RENDER_PIPELINES_# // [---][016][---]
#_ATTACH_SHADERS_TO_PROGRAM_# :================================: // [---][017][---]
                                                                 // [---][017][---]
    Attach respective shaders to their programs...               // [---][017][---]
    Wait... Have we loaded source code into the                  // [---][017][---]
    shaders yet ? Let me check...                                // [---][017][---]
                                                                 // [---][017][---]
    No, we haven't. I don't know if that will end                // [---][017][---]
    up being a problem or not. We will find out.                 // [---][017][---]
                                                                 // [---][017][---]
:================================: #_ATTACH_SHADERS_TO_PROGRAM_# // [---][017][---]
?_VIDEO_18_CHANGES_? :=========================================: // [---][018][---]
                                                                 // [---][018][---]
    We did refactoring to the names for better consistency.      // [---][018][---]
    Names ( identifiers ) should be written in a                 // [---][018][---]
    "general to specific" fashion.                               // [---][018][---]
                                                                 // [---][018][---]
:=========================================: ?_VIDEO_18_CHANGES_? // [---][018][---]
$_YOUR_PROGRAM_IS_EVIL_$ :=====================================: // [---][019][---]
                                                                 // [---][019][---]
    Your webgl program object is morally corrupt and that        // [---][019][---]
    is why your code doesn't work. If only you used more         // [---][019][---]
    "thoughts and prayers" I am sure it would work.              // [---][019][---]
                                                                 // [---][019][---]
    The 24-to-0 hour help hotline is here on twitch:             // [---][019][---]
                                                                 // [---][019][---]
    www.twitch.tv/KanjiCoder                                     // [---][019][---]
                                                                 // [---][019][---]
    Ask away and I will try and help!                            // [---][019][---]
                                                                 // [---][019][---]
:=====================================: $_YOUR_PROGRAM_IS_EVIL_$ // [---][019][---]
#_COMPILE_AND_LINK_# :=========================================: // [---][020]
                                                                 // [---][020]
    Compile and Link your program.                               // [---][020]
    What does that mean? Why "Compile" first and                 // [---][020]
    __THEN__ link ?                                              // [---][020]
                                                                 // [---][020]
    The termonology comes from C-code.                           // [---][020]
    Each shader can be thought of as a "translation unit" .      // [---][020]
    Chat GPT disagrees with me and says that it is not           // [---][020]
    analogous and that it is more akin to a                      // [---][020]
    "single function module". I think chat GPT is                // [---][020]
    gas lighting me again.                                       // [---][020]
                                                                 // [---][020]
    Anyways, point is that you "compile" many different          // [---][020]
    binaries from source files, and those compiled               // [---][020]
    binaries do not create an entire program until               // [---][020]
    those binaries are "sewn together" / "stitched together"     // [---][020]
    by "linking".                                                // [---][020]
                                                                 // [---][020]
:=========================================: #_COMPILE_AND_LINK_# // [---][020]
#_COMPILE_ALL_VERTEX_SHADERS_# :===============================: // [---][020]
                                                                 // [---][020]
    Compile all of the __VERTEX__ shaders in our project.        // [---][020]
    A total of four, 1 for each program.                         // [---][020]
                                                                 // [---][020]
:===============================: #_COMPILE_ALL_VERTEX_SHADERS_# // [---][020]
#_COMPILE_ALL_FRAGMENT_SHADERS_# :=============================: // [---][020]
                                                                 // [---][020]
    Compile all of the __FRAGMENT__ shaders in our project.      // [---][020]
    A total of four, 1 for each program.                         // [---][020]
                                                                 // [---][020]
:=============================: #_COMPILE_ALL_FRAGMENT_SHADERS_# // [---][020]
#_LINK_YOUR_FOUR_PROGRAMS_# :==================================: // [---][020]
                                                                 // [---][020]
    Link all four(4) of the __PROGRAM__ objects in our           // [---][020]
    project together with their 2-respective shaders             // [---][020]
    to create four(4) complete shader [ objects / programs ].    // [---][020]
                                                                 // [---][020]
:==================================: #_LINK_YOUR_FOUR_PROGRAMS_# // [---][020]
#_ADD_SOURCE_CODE_STRINGS_# :==================================: // [---][023][---]
                                                                 // [---][023][---]
    We forgot to do this. Before we can compile and link         // [---][023][---]
    we need to make sure that our shader program handles         // [---][023][---]
    are loaded with source code.                                 // [---][023][---]
                                                                 // [---][023][---]
    I think "loaded" is correct because our webgl context        // [---][023][---]
    is going to create a[ deep-string-copy ]of the text          // [---][023][---]
    we provide to it, not simply hold onto a pointer to          // [---][023][---]
    the string.                                                  // [---][023][---]
                                                                 // [---][023][---]
:==================================: #_ADD_SOURCE_CODE_STRINGS_# // [---][023][---]
#_LOAD_ALL_SOURCE_VERTEX_# :===================================: // [---][023][---]
                                                               | // [---][023][---]
    Load all __VERTEX__ code into __VERTEX__ shader objects.   | // [---][023][---]
                                                               | // [---][023][---]
:===================================: #_LOAD_ALL_SOURCE_VERTEX_# // [---][023][---]
#_LOAD_ALL_SOURCE_FRAGMENT_# :=================================: // [---][023][---]
                                                               | // [---][023][---]
    Load all __FRAGMENT__ code into __FRAGMENT__ shader objects| // [---][023][---]
                                                               | // [---][023][---]
:=================================: #_LOAD_ALL_SOURCE_FRAGMENT_# // [---][023][---]
?_VIDEO_026_BUGFIX_? :=========================================: // [---][026][---]
                                                                 // [---][026][---]
    Javascript will let you call functions with the              // [---][026][---]
    wrong number of parameters. I forgot about this,             // [---][026][---]
    but I fixed it in this video.                                // [---][026][---]
                                                                 // [---][026][---]
:=========================================: ?_VIDEO_026_BUGFIX_? // [---][026][---]
#_ATTACH_VERTEX_SHADERS_# :====================================: // [---][026][---]
                                                                 // [---][026][---]
    Attach all __VERTEX__ shaders to our program objects.        // [---][026][---]
                                                                 // [---][026][---]
:====================================: #_ATTACH_VERTEX_SHADERS_# // [---][026][---]
#_ATTACH_FRAGMENT_SHADERS_# :==================================: // [---][026][---]
                                                                 // [---][026][---]
    Attach all __FRAGMENT__ shaders to our program objects.      // [---][026][---]
                                                                 // [---][026][---]
:==================================: #_ATTACH_FRAGMENT_SHADERS_# // [---][026][---]
$_SNAP_TO_CLIENT_AREA_$ :======================================: // [---][033][---]
                                                                 // [---][033][---]
    Snap the rendering area to the client area. The              // [---][033][---]
    "client area" is the part of the screen an application       // [---][033][---]
    has permission to draw on. It is pretty much everything      // [---][033][---]
    besides the titlebar and the boarder of the window.          // [---][033][---]
                                                                 // [---][033][---]
    We need to make sure the canvas is large enough,             // [---][033][---]
    and make sure the rendering context is fitted                // [---][033][---]
    to that canvas.                                              // [---][033][---]
                                                                 // [---][033][---]
:======================================: $_SNAP_TO_CLIENT_AREA_$ // [---][033][---]
#_ERASE_FOR_NEXT_DRAW_# :======================================: // [---][034][---]
                                                                 // [---][034][---]
    Erase the screen with green before we do the next            // [---][034][---]
    screen re-draw. Otherwise we might end up with a             // [---][034][---]
    windows 95 desktop is fucking up type problem.               // [---][034][---]
                                                                 // [---][034][---]
:======================================: #_ERASE_FOR_NEXT_DRAW_# // [---][034][---]
$_CPU_SIDE_2048_X_2048_TEXTURE_$ :=============================: // [---][037][---]
                                                                 // [---][037][---]
    CPU-side 2048_X_2048 bitmap that is synced with gpu.         // [---][037][---]
    We will use this for the main tilemap memory.                // [---][037][---]
                                                                 // [---][037][---]
    All of our "uniforms" are going to be hard coded             // [---][037][---]
    into the texture memory. The only uniform that               // [---][037][---]
    is __NOT__ will be the texture sampler itself ,              // [---][037][---]
    because... well, that's a dependency loop.                   // [---][037][---]
    We can't store the address of the texture in                 // [---][037][---]
    the texture itself.                                          // [---][037][---]
                                                                 // [---][037][---]
:=============================: $_CPU_SIDE_2048_X_2048_TEXTURE_$ // [---][037][---]
#_SETUP_TEXTURE_001_# :========================================: // [---][037][---]
                                                                 // [---][037][---]
    Configure our cpu-side bitmap to have an analog on           // [---][037][---]
    the gpu-side. [ d_p2k_cpu ]is known as[ d_pix2048 ]          // [---][037][---]
    in our main[ ATOMIC_IVY_MMO.JS ]project.                     // [---][037][---]
                                                                 // [---][037][---]
:========================================: #_SETUP_TEXTURE_001_# // [---][037][---]
$_WEBGL_TEXTURE_OBJECT_HANDLE_$ :==============================: // [---][037][---]
                                                                 // [---][037][---]
    If this were OPENGL, this[ d_p2k_tex ]would just be          // [---][037][---]
    an integer handle used as a reciept given to you             // [---][037][---]
    by the OPENGL API for the texture is allocated for           // [---][037][---]
    you on the GPU-side.                                         // [---][037][---]
                                                                 // [---][037][---]
    When you want things done with this texture,                 // [---][037][---]
    you have to use this texture reciept[ d_p2k_tex ].           // [---][037][---]
                                                                 // [---][037][---]
    Multiple sampler uniforms are allowed to reference           // [---][037][---]
    the same texture object. So if you are wondering             // [---][037][---]
    why there seems to be more indirection than                  // [---][037][---]
    necessary, that is probably the reason.                      // [---][037][---]
                                                                 // [---][037][---]
:==============================: $_WEBGL_TEXTURE_OBJECT_HANDLE_$ // [---][037][---]
$_P2K_TEXTURE_UNIT_INDEX_$ :===================================: // [---][037][---]
                                                                 // [---][037][---]
    I don't know the difference between "texture slots"          // [---][037][---]
    and "texture units". In this case, I am using :              // [---][037][---]
                                                                 // [---][037][---]
        1. "Texture Unit" to mean "LOCAL INDEX".                 // [---][037][---]
        2. "Texture Slot" to mean "ABSOLUTE INDEX".              // [---][037][---]
                                                                 // [---][037][---]
        FORMULA : Texture_Slot == GLTEXTURE0+Texture_Unit        // [---][037][---]
                                                                 // [---][037][---]
    But I don't know. I just know enough webgl+opengl            // [---][037][---]
    to get by. I am a fraud. Don't meet your heros.              // [---][037][---]
                                                                 // [---][037][---]
:===================================: $_P2K_TEXTURE_UNIT_INDEX_$ // [---][037][---]
#_SETUP_TEXTURE_002_# :========================================: // [---][038][---]
                                                                 // [---][038][---]
    This texture is used for data storage. We need to            // [---][038][---]
    avoid doing any interpolation or wrapping on the             // [---][038][---]
    texture when sampling from it, because that will             // [---][038][---]
    cause weird things to happen and data corruption.            // [---][038][---]
                                                                 // [---][038][---]
:========================================: #_SETUP_TEXTURE_002_# // [---][038][---]
#_SETUP_TEXTURE_003_# :========================================: // [---][039]
                                                               | // [---][039]
    Do our initial texture upload here.                        | // [---][039]
    We havent populated the texture with any                   | // [---][039]
    initial data, so maybe this is pointless...                | // [---][039]
                                                               | // [---][039]
    But here I am doing it anyways.                            | // [---][039]
                                                               | // [---][039]
    I think it is still important because this initial         | // [---][039]
    upload is what configures our texture as an                | // [---][039]
    unsigned_32_bit_texture.                                   | // [---][039]
                                                               | // [---][039]
        $_T_O_T_$ :----------------------------------------:   | // [---][039]
                                                           |   | // [---][039]
            @T_O_T@ : Type_Of_Texture , In webgl           |   | // [---][039]
                    : this is known as "Texture Target"    |   | // [---][039]
                                                           |   | // [---][039]
        :----------------------------------------: $_T_O_T_$   | // [---][039]
        $_L_O_D_$ :----------------------------------------:   | // [---][039]
                                                           |   | // [---][039]
            Level_Of_Detail , a zero here                  |   | // [---][039]
            means "mip map level 0" which                  |   | // [---][039]
            means "full resolution texture".               |   | // [---][039]
                                                           |   | // [---][039]
        :----------------------------------------: $_L_O_D_$   | // [---][039]
        $_C_FMT_$ :---------------------------------:          | // [---][039]
                                                    |          | // [---][039]
            @C_FMT@ : CPU-side FORMAT of PIXEL_DATA.|          | // [---][039]
                                                    |          | // [---][039]
        :---------------------------------: $_C_FMT_$          | // [---][039]
        $_G_FMT_$ :---------------------------------:          | // [---][039]
                                                    |          | // [---][039]
            YES!!! TWO INPUTS ARE TAGGED WITH THIS  |          | // [---][039]
                   BECAUSE COLLECTIVELY THEY MAKE   |          | // [---][039]
                   UP THE[ GPU_FORMAT ]!!!!!!!!!!!  |          | // [---][039]
                                                    |          | // [---][039]
            @G_FMT@ : GPU-side FORMAT of PIXEL_DATA.|          | // [---][039]
                                                    |          | // [---][039]
                    : Technically on GPU it is      |          | // [---][039]
                    : called "Texel Data".          |          | // [---][039]
                                                    |          | // [---][039]
        :---------------------------------: $_G_FMT_$          | // [---][039]
        [ T_I_2_D ] :-------------------------------:          | // [---][039]
                                                    |          | // [---][039]
            Just marking the scope of the           |          | // [---][039]
            [ texImage2D ]call, because it is       |          | // [---][039]
            a pretty verbose call with a lot of     |          | // [---][039]
            [ actual arguments ]to keep track of.   |          | // [---][039]
                                                    |          | // [---][039]
            Formal_Params : Part of func prototype  |          | // [---][039]
            Actual_Args   : Actual data passed in   |          | // [---][039]
                                                    |          | // [---][039]
        :-------------------------------:[ T_I_2_D ]:          | // [---][039]
                                                               | // [---][039]
:========================================: #_SETUP_TEXTURE_003_# // [---][039]
#_SETUP_TEXTURE_SAMPLER_# :====================================: // [---][040]
                                                                 // [---][040]
    Wire up all four of our texture samplers that sample         // [---][040]
    from the same[ 2048_X_2048 ]texture used to store            // [---][040]
    bitpacked data such as tilemap data.                         // [---][040]
                                                                 // [---][040]
    @d_p2k_loc@ : The name of uniform location that samples      // [---][040]
                : from "[p2k]/[d_pix2048]/[d_p2k_cpu]"           // [---][040]
                : when we only have ONE_SAMPLER , but            // [---][040]
                : we have FOUR_SAMPLERS in this project          // [---][040]
                : so use[ d_p2k_l01 , d_p2k_l02 ]                // [---][040]
                :       [ d_p2k_l03 , d_p2k_l04 ]                // [---][040]
                                                                 // [---][040]
    #_GET_SAMPLER_LOC_IN_GPU_# :===========================:     // [---][040]
                                                           |     // [---][040]
        Get uniform location of our texture sampler        |     // [---][040]
        within our 4 different shader pipelines...         |     // [---][040]
                                                           |     // [---][040]
        Hold the fuck up... this texture sampler should    |     // [---][040]
        be available in every single shader stage...       |     // [---][040]
                                                           |     // [---][040]
        So... 4 uniforms is not enough... We need to       |     // [---][040]
        fix this in the next video.                        |     // [---][040]
                                                           |     // [---][040]
    :===========================: #_GET_SAMPLER_LOC_IN_GPU_#     // [---][040]
    #_PUT_SAMPLER_VAL_IN_GPU_# :===========================:     // [---][040]
                                                           |     // [---][040]
        Load the texture samplers with an integer value    |     // [---][040]
        that tells us what relative texture_unit_index     |     // [---][040]
        to sample from. I don't understand why sometimes   |     // [---][040]
        we specify the texture as an "ABSOLUTE_VALUE"      |     // [---][040]
        and other times we we a "RELATIVE_VALUE" and       |     // [---][040]
        there seems to be no rhyme or reason to it.        |     // [---][040]
                                                           |     // [---][040]
        $_EXP_ZER_OS_$ :-------------------------------:   |     // [---][040]
                                                       |   |     // [---][040]
            This "_0_" variable is here to make it     |   |     // [---][040]
            obvious that the offset here should be     |   |     // [---][040]
            a[ relative_offset ]and should __NOT__     |   |     // [---][040]
            be value that resulted from adding to      |   |     // [---][040]
            the[ base_address ]of[ GL_TEXTURE0 ].      |   |     // [---][040]
                                                       |   |     // [---][040]
        :-------------------------------: $_EXP_ZER_OS_$   |     // [---][040]
                                                           |     // [---][040]
    :===========================: #_PUT_SAMPLER_VAL_IN_GPU_#     // [---][040]
                                                                 // [---][040]
:====================================: #_SETUP_TEXTURE_SAMPLER_# // [---][040]
#_ERROR_CHECK_SAMPLERS_# :=====================================: // [---][043][---]
                                                                 // [---][043][---]
    Throw error if the sampler uniform location object           // [---][043][---]
    comes back null. Pretty sure in WEBGL the uniform            // [---][043][---]
    location is a                                                // [---][043][---]
                                                                 // [---][043][---]
        STUPID_FUCKING_OBJECT                                    // [---][043][---]
                                                                 // [---][043][---]
    where-as in OPENGL the uniform location is a                 // [---][043][---]
                                                                 // [---][043][---]
        SANE_REASONABLE_INTEGER_HANDLE                           // [---][043][---]
                                                                 // [---][043][---]
:=====================================: #_ERROR_CHECK_SAMPLERS_# // [---][043][---]
$_SAM_P2K_$ :==================================================: // [---][044][---]
                                                                 // [---][044][---]
    A SAMPLER(SAM) that samples from P2K(Pixels_2000_K)          // [---][044][---]
                                                                 // [---][044][---]
:==================================================: $_SAM_P2K_$ // [---][044][---]
$_NOCOLIN_$ :==================================================: // [---][045]
                                                               | // [---][045]
    A reminder to __NOT__ put a SEMI-COLON at the end of       | // [---][045]
    this line of code because in GLSL code a semicolon         | // [---][045]
    after the closing brace of a function body is a            | // [---][045]
    syntax error.                                              | // [---][045]
                                                               | // [---][045]
    WHY?                                                       | // [---][045]
                                                               | // [---][045]
    I think because semi-colon terminates a STATEMENT          | // [---][045]
    and the closing chicken bracket of a function              | // [---][045]
    is not the end of a statement, but the end of              | // [---][045]
    a function block.                                          | // [---][045]
                                                               | // [---][045]
:==================================================: $_NOCOLIN_$ // [---][045]
$_Sprite__Block_$ :============================================: // [---][046]
                                                               | // [---][046]
    +------------------------------------------------------+   | // [---][046]
    | All sprite information for all sprites within the    |   | // [---][046]
    | active level pack are bit-packed into this           |   | // [---][046]
    | 64_X_64 chunk of memory within centeral levelpack    |   | // [---][046]
    | pixel data.                                          |   | // [---][046]
    +------------------------------------------------------+   | // [---][046]
                                                               | // [---][046]
    @kt_c_sbx@ : KanjiTile - Constant - SpriteBlock.X          | // [---][046]
    @kt_c_sby@ : KanjiTile - Constant - SpriteBlock.Y          | // [---][046]
                                                               | // [---][046]
       @c_sbx@ : ATOMIC_IVY_MMO.JS(*S)  SpriteBlock.X          | // [---][046]
       @c_sby@ : ATOMIC_IVY_MMO.JS(*S)  SpriteBlock.Y          | // [---][046]
                                                               | // [---][046]
    kt_c_sbx === c_sbx                                         | // [---][046]
    kt_c_sby === c_sby                                         | // [---][046]
                                                               | // [---][046]
    @c_kt_sbx@ : WRONG , project namespace before "c_"         | // [---][046]
    @c_kt_sby@ : WRONG , project namespace before "c_"         | // [---][046]
    @c_ktb_sbx@: DOUBLY_WRONG , "kt" not "ktb"                 | // [---][046]
    @c_ktb_sby@: DOUBLY_WRONG , "kt" not "ktb"                 | // [---][046]
    @ktb_c_sbx@: WRONG , "kt" not "ktb"                        | // [---][046]
    @ktb_c_sby@: WRONG , "kt" not "ktb"                        | // [---][046]
                                                               | // [---][046]
:============================================: $_Sprite__Block_$ // [---][046]
$_Uniform_Block_$ :============================================: // [---][046]
                                                               | // [---][046]
    +------------------------------------------------------+   | // [---][046]
    | All uniforms and misc game state are stored here     |   | // [---][046]
    | in this block of 64_X_64 pixels within the           |   | // [---][046]
    | 512_X_512 chunk of levelpack data for the            |   | // [---][046]
    | centeral levelpack of the engine.                    |   | // [---][046]
    |                                                      |   | // [---][046]
    | The "uniform block" can also be thought of as        |   | // [---][046]
    | the "game data block". TAG[ $_Game_Block_$ ]         |   | // [---][046]
    |                        TAG[ $_Game_Data_Block_$ ]    |   | // [---][046]
    |                                                      |   | // [---][046]
    | In[ AAC2020 ]C99 Code base, we had a thing called    |   | // [---][046]
    | the[ TAU ]( @tau@ : Texture_As_Uniform ). The        |   | // [---][046]
    | memory at origin[ c_ubx,c_uby ]is for the same       |   | // [---][046]
    | exact purpose. You can think of it as the "tau".     |   | // [---][046]
    |                                                      |   | // [---][046]
    | And it has nothing to do with circles.               |   | // [---][046]
    | MATH_TAU === 2 * MATH_PIE                            |   | // [---][046]
    |                                                      |   | // [---][046]
    +------------------------------------------------------+   | // [---][046]
                                                               | // [---][046]
    @kt_c_ubx@ : KanjiTile - Constant - UniformBlock.X         | // [---][046]
    @kt_c_uby@ : KanjiTile - Constant - UniformBlock.Y         | // [---][046]
                                                               | // [---][046]
       @c_ubx@ : ATOMIC_IVY_MMO.JS(*S)  UniformBlock.X         | // [---][046]
       @c_uby@ : ATOMIC_IVY_MMO.JS(*S)  UniformBlock.Y         | // [---][046]
                                                               | // [---][046]
    kt_c_ubx === c_ubx                                         | // [---][046]
    kt_c_uby === c_uby                                         | // [---][046]
                                                               | // [---][046]
    @c_kt_ubx@ : WRONG , project namespace before "c_"         | // [---][046]
    @c_kt_uby@ : WRONG , project namespace before "c_"         | // [---][046]
    @c_ktb_ubx@: DOUBLY_WRONG , "kt" not "ktb"                 | // [---][046]
    @c_ktb_uby@: DOUBLY_WRONG , "kt" not "ktb"                 | // [---][046]
    @ktb_c_ubx@: WRONG , "kt" not "ktb"                        | // [---][046]
    @ktb_c_uby@: WRONG , "kt" not "ktb"                        | // [---][046]
                                                               | // [---][046]
:============================================: $_Uniform_Block_$ // [---][046]
#_CODING_CONVENTIONS_# :=======================================: // [---][046]
                                                               | // [---][046]
    @c_@ :::: GLOBAL constant prefix (lower case )             | // [---][046]
    @d_@ :::: GLOBAL data     prefix (lower case )             | // [---][046]
    @F_@ :::: GLOBAL function prefix (CAPITAL    )             | // [---][046]
                                                               | // [---][046]
    @kt@    : We use "kt" instead of "ktb" because I can       | // [---][046]
    @kt_@   : tack it on the front of lists of constants       | // [---][046]
            : and not fuck up the alignment of the code        | // [---][046]
            : too much.                                        | // [---][046]
            :                                                  | // [---][046]
            : PREFIX ONLY USED TO AVOID COLLISIONS WITH        | // [---][046]
            : ATOMIC_IVY_MMO.JS or other code bases.           | // [---][046]
            :                                                  | // [---][046]
            : I don't want to make my variable names           | // [---][046]
            : annoyingly long and wreck the                    | // [---][046]
            : "signal to noise" ratio. We want a ratio         | // [---][046]
            : that is ABOVE 1 , not LESS THAN ONE.             | // [---][046]
                                                               | // [---][046]
    @ktb@   : Would be logically the most rational             | // [---][046]
    @ktb_@  : library prefix, since this is the "KTB"          | // [---][046]
            : project. BUT... It is 1 letter too many in       | // [---][046]
            : practice for my OCD sensibilities of             | // [---][046]
            : lining up code.                                  | // [---][046]
                                                               | // [---][046]
:=======================================: #_CODING_CONVENTIONS_# // [---][046]
#_ADVANCED_DOM_SETUP_# :=======================================: // [---][047][---]
                                                               | // [---][047][---]
    Any other advanced DOM(Domain_Object_Model) setup          | // [---][047][---]
    code will be inserted into this section.                   | // [---][047][---]
    ... Does EVENT LISTENERS ... count as DOM SETUP ?          | // [---][047][---]
                                                               | // [---][047][---]
    Hmm... They __COULD__ for sure , but rather                | // [---][047][---]
    register event listeners for keyboard and mouse            | // [---][047][---]
    after I know everything is __READY__ at the                | // [---][047][---]
    __BOTTOM__ of the setup() function.                        | // [---][047][---]
                                                               | // [---][047][---]
:=======================================: #_ADVANCED_DOM_SETUP_# // [---][047][---]
#_REMOVE_SCROLL_BARS_# :=======================================: // [---][047][---]
                                                               | // [---][047][---]
    TAG[ scroll bars | scroll-bars | scrollbars ]              | // [---][047][---]
    TAG[ scroll bar  | scroll-bar  | scrollbar  ]              | // [---][047][---]
                                                               | // [---][047][---]
    Remove the annoying ass scrollbars from our application    | // [---][047][---]
    which should be 100% fitted to screen, thus no need        | // [---][047][---]
    for any scrollbars.                                        | // [---][047][---]
                                                               | // [---][047][---]
:=======================================: #_REMOVE_SCROLL_BARS_# // [---][047][---]
[ U_R_I ] :====================================================: // [---][048]
                                                               | // [---][048]
    @U_R_I@ / @uri@ : Uniform_Relative_Index                   | // [---][048]
                                                               | // [---][048]
    The Uniform_Relative_Index( URI )is very much like         | // [---][048]
    the[ SAI ], but the[ URI ]is a relative 1D scanline        | // [---][048]
    index address. Or in other words... A relative             | // [---][048]
    seeking amount into our 64_X_64 block of sprite            | // [---][048]
    attribute memory.                                          | // [---][048]
                                                               | // [---][048]
:====================================================: [ U_R_I ] // [---][048]
[ S_A_I ] :====================================================: // [---][048]
                                                               | // [---][048]
    NOT ADDED TO THIS PROJECT YET IN THIS DELTA.               | // [---][048]
    ( We are on KTB_048.JS / [048] as of writing.              | // [---][048]
    Used in :                                                  | // [---][048]
        +---------------------------------------+              | // [---][048]
        | www.tinyurl.com/POI-PLAYLIST          |              | // [---][048]
        | www.github.com/KanjiCoder/POI         |              | // [---][048]
        |                                       |              | // [---][048]
        | www.tinyurl.com/KANJI-PLAYLIST-013    |              | // [---][048]
        | www.github.com/KanjiCoder/AIM         |              | // [---][048]
        +---------------------------------------+              | // [---][048]
                                                               | // [---][048]
    @S_A_I@ / @sai@ : Sprite_Attribute_Index                   | // [---][048]
                                                               | // [---][048]
    The Sprite_Attribute_Index( SAI )is a relative offset      | // [---][048]
    downward from the head of a sprite attriute data           | // [---][048]
    column. It gives us the relative y-position of the         | // [---][048]
    pixel containing the data for the sprite we want.          | // [---][048]
                                                               | // [---][048]
    Each sprite get's is own "Column" of data.                 | // [---][048]
    So we only need to define where different                  | // [---][048]
    [ attributes / data ]for sprites are via the               | // [---][048]
    y-axis ( vertical position within the column )             | // [---][048]
                                                               | // [---][048]
:====================================================: [ S_A_I ] // [---][048]
?_WHATEVER_MEMORY_? :==========================================: // [---][048]
                                                               | // [---][048]
    I was looking for this... Decided __NOT__ to use           | // [---][048]
    this name, but rather call it [ ubx,uby ].                 | // [---][048]
    But you __CAN__ think of      [ wmx,wmy ]===[ ubx,uby ]    | // [---][048]
                                                               | // [---][048]
    Whatever Texture Memory Block :                            | // [---][048][MOV][001]
                                                               | // [---][048][MOV][001]
        @wmx@ : whatever_memory - X origin ( USE : ubx )       | // [---][048][MAR][001]
        @wmy@ : whatever_memory - Y origin ( USE : uby )       | // [---][048][MAR][001]
                                                               | // [---][048]
:==========================================: ?_WHATEVER_MEMORY_? // [---][048]
?_GAME_MEMORY_? :==============================================: // [---][048]
                                                               | // [---][048]
    We don't call it the "game memory block" , we call         | // [---][048]
    it the "uniform block" because game state variables        | // [---][048]
    need to be synced with the GPU as[ fake_uniform ]          | // [---][048]
    values packed into the pixels of texture.                  | // [---][048]
                                                               | // [---][048]
    @gmx@ : Game_Memory - X origin ( USE : ubx )               | // [---][048]
    @gmy@ : Game_Memory - Y origin ( USE : uby )               | // [---][048]
                                                               | // [---][048]
:==============================================: ?_GAME_MEMORY_? // [---][048]
?_UNIFORM_PUTTER_WRAPPERS_? :==================================: // [050][---]
                                                               | // [050][---]
    The only reason these wrappers exist is to shorten         | // [050][---]
    the column lenght of our code, yes, that is not a          | // [050][---]
    ... GOOD_THING to be doing, but all coding styles          | // [050][---]
    have their "PROS" and "CONS". This is one of the           | // [050][---]
    "CONS".                                                    | // [050][---]
                                                               | // [050][---]
    @UP1@ : Uniform_Put_1 ( short_for : PUT_HP1 )(NOT:PUT_PH1) | // [050][---]
    @UP2@ : Uniform_Put_2 ( short_for : PUT_HP2 )(NOT:PUT_PH2) | // [050][---]
    @UP3@ : Uniform_Put_3 ( short_for : PUT_HP3 )(NOT:PUT_PH3) | // [050][---]
    @UP4@ : Uniform_Put_4 ( short_for : PUT_HP4 )(NOT:PUT_PH4) | // [050][---]
                                                               | // [050][---]
    [ PUT_PH1 ] : NOT[ Program_Handle ]BUT[ Handle_Program ]   | // [050][---]
    [ PUT_PH2 ] : NOT[ Program_Handle ]BUT[ Handle_Program ]   | // [050][---]
    [ PUT_PH3 ] : NOT[ Program_Handle ]BUT[ Handle_Program ]   | // [050][---]
    [ PUT_PH4 ] : NOT[ Program_Handle ]BUT[ Handle_Program ]   | // [050][---]
                                                               | // [050][---]
:==================================: ?_UNIFORM_PUTTER_WRAPPERS_? // [050][---]

*** ******************************************************** **/ // [---][001]
//+==========================================================+// // [---][001]
//| Comments Section Is Above This Point                     |// // [---][001]
//+==========================================================+// // [---][001]
     
     
     
     
     
     
     
     
     
     
     
     